@page "/Empleados"
@inject EmpleadosPGSQLContext Contexto
@inject NavigationManager NavigationManager

<TituloConAñadir Nombre="Empleados" Link="Empleados/Crear"></TituloConAñadir>

<!--Espacio para buscar empleados por su nombre-->
<div class="row">
    <div class="col-12 col-md-6">
        <div class="input-group mb-3">
            <span class="input-group-text" id="basic-addon1"><i class="bi bi-search"></i></span>
            <input type="text" class="form-control" placeholder="Buscar por nombre" @bind="searchText" @oninput="HandleInput" />
        </div>
    </div>
</div>

<!--DropDown Filtro por tipo de empleado-->
<Dropdown>
    <DropdownToggleButton Color="ButtonColor.Primary">@GetSelectedTipoEmpleadoText()</DropdownToggleButton>
    <DropdownMenu>
        <DropdownItem @onclick="() => FilterEmpleadosByTipoEmpleado(0)">Todos</DropdownItem>
        @foreach (var tipoEmpleado in TiposDeEmpleado)
        {
            <DropdownItem @onclick="() => FilterEmpleadosByTipoEmpleado(tipoEmpleado.identificador_categoria)">@tipoEmpleado.nombre_categoria</DropdownItem>
        }
    </DropdownMenu>
</Dropdown>

<!--Tabla que muestra todos los empleados, los datos en base al modelo-->
<table class="table table-striped">
    <thead>
        <tr>
            <th>Id</th>
            <th>Nombre Completo</th>
            <th>Salario Diario</th>
            <th>Tipo de Empleado</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var empleado in empleados.Skip((currentPageNumber - 1) * itemsPerPage).Take(itemsPerPage))
        {
            <tr>
                <td>@empleado.identificador</td>
                <td>@empleado.nombre_completo_empleado</td>
                <td>@empleado.salario_diario</td>
                <!--Muestra el nombre del tipo de empleado con find-->
                <td>@TiposDeEmpleado.Find(c => c.identificador_categoria == empleado.tipo_empleado_id).nombre_categoria</td>

                <td>

                    <!--Boton editar-->
                    <a class="btn btn-secondary" href="Empleados/Editar/@empleado.identificador">
                        <i class="bi bi-pencil-square"></i>
                    </a>
                    <button class="btn btn-danger" @onclick="(() => EliminarEmpleado(empleado.identificador))">
                        <i class="bi bi-trash"></i>
                    </button>


                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Si no hay empleados -->
@if (empleados.Count == 0)
{
    <div class="alert alert-info" role="alert">
        No hay Empleados
    </div>
}

<div class="d-flex justify-content-center">
    <!-- Agrega el componente de paginacion-->
    <Pagination ActivePageNumber="@currentPageNumber"
                TotalPages="totalPages"
                PageChanged="OnPageChangedAsync"
                FirstLinkIcon="IconName.ChevronDoubleLeft"
                PreviousLinkIcon="IconName.ChevronLeft"
                NextLinkIcon="IconName.ChevronRight"
                LastLinkIcon="IconName.ChevronDoubleRight" />
</div>


@code {
    [Inject] protected PreloadService PreloadService { get; set; }
    private List<Empleado> empleados = new List<Empleado>();
    [Inject] protected ToastService ToastService { get; set; }
    //Lista de tipos de empleado
    private List<TipoDeEmpleado> TiposDeEmpleado = new List<TipoDeEmpleado>();
    private int selectedCategoriaID = 0; // Inicialmente, selecciona "Todos" (0)
                                         //Busqueda
    private string searchText = "";
    int currentPageNumber = 1;
    int itemsPerPage = 10; // Define la cantidad de elementos por página
    int totalPages => (int)Math.Ceiling(empleados.Count / (double)itemsPerPage);

    // Se ejecuta cuando se cambia de página
    private async Task OnPageChangedAsync(int newPageNumber)
    {
        currentPageNumber = newPageNumber;
        StateHasChanged(); // Asegúrate de forzar la actualización de la interfaz de usuario
    }

    protected override async Task OnInitializedAsync()
    {
        PreloadService.Show(SpinnerColor.Primary);
        try
        {
            //Trae los empleados que tengan el estado activo organizados por ID
            empleados = await Contexto.Empleados.Where(c => c.estado == EstadoRegistro.Activo).OrderBy(c => c.identificador).ToListAsync();
            //Trae los tipos de empleado que tengan el estado activo por ID
TiposDeEmpleado = await Contexto.TiposDeEmpleado.Where(c => c.estado == EstadoRegistro.Activo).OrderBy(c => c.identificador_categoria).ToListAsync();
            //Espera 1 segundo
            await Task.Delay(500);
        }
        catch (Exception ex)
        {
            //Alerta de error de tipo app
            await Application.Current.MainPage.DisplayAlert("Error", "No se pudo cargar los empleados" + ex, "Ok");
        }
        finally
        {
            PreloadService.Hide();
        }

    }

    //Proceso de eliminado
    private async void EliminarEmpleado(int id)
    {
        PreloadService.Show(SpinnerColor.Primary);
        //Alerta de confirmacion
        var confirm = await Application.Current.MainPage.DisplayAlert("Confirmación", "¿Está seguro de eliminar el empleado?", "Si", "No");
        //Si se confirma
        if (confirm)
        {
            try
            {
                //Busca el empleado
                var empleado = await Contexto.Empleados.FindAsync(id);
                //Cambia el estado a inactivo
                empleado.estado = EstadoRegistro.Inactivo;
                //Guarda los cambios
                await Contexto.SaveChangesAsync();
                //Espera 1 segundo
                await Task.Delay(500);
                //Alerta tostado de eliminado
                ToastService.Notify(new ToastMessage(ToastType.Success, $"El empleado se ha eliminado correctamente"));
                //Redirecciona a la pagina de Empleado
                NavigationManager.NavigateTo("/Empleados", true);
            }
            catch (Exception ex)
            {
                await Application.Current.MainPage.DisplayAlert("Error", "No se pudo eliminar el empleado" + ex, "Ok");
            }
            finally
            {
                PreloadService.Hide();
            }
        }
        else
        {
            PreloadService.Hide();
        }

    }

    //Filtro por tipo de empleado
    private void FilterEmpleadosByTipoEmpleado(int tipoEmpleadoID)
    {
        selectedCategoriaID = tipoEmpleadoID;
        if (tipoEmpleadoID == 0)
        {
            empleados = Contexto.Empleados.Where(c => c.estado == EstadoRegistro.Activo).ToList();
        }
        else
        {
            empleados = Contexto.Empleados.Where(c => c.estado == EstadoRegistro.Activo && c.tipo_empleado_id == tipoEmpleadoID).ToList();
        }
        StateHasChanged();
    }

    private string GetSelectedTipoEmpleadoText()
    {
        if (selectedCategoriaID == 0)
        {
            return "Todos";
        }
        else
        {
            return TiposDeEmpleado.Find(c => c.identificador_categoria == selectedCategoriaID).nombre_categoria;
        }
    }

    private void HandleInput(ChangeEventArgs e)
    {
        searchText = e.Value.ToString();
        SearchEmpleados();
    }

    private void SearchEmpleados()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            // Muestra todos los empleados
            empleados = Contexto.Empleados.Where(c => c.estado == EstadoRegistro.Activo).ToList();
        }
        else
        {
            // Muestra solo los empleados que contengan el texto de búsqueda organizados por el ID
            empleados = Contexto.Empleados.Where(c => c.estado == EstadoRegistro.Activo && c.nombre_completo_empleado.Contains(searchText)).OrderBy(c => c.identificador).ToList();
        }
    }


}
