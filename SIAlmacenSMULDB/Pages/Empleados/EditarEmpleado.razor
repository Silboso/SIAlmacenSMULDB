@page "/Empleados/Editar/{id:int}"
@inject EmpleadosPGSQLContext Contexto
@inject NavigationManager NavigationManager

<TituloSolito Nombre="Editar Empleado" />

<!--Formulario para editar un Empleado-->

<EditForm Model="@empleado" OnValidSubmit="GuardarCambios">

    <DataAnnotationsValidator />

    <ValidationSummary />

    <div class="form-group">
        <label for="nombre_completo_empleado">Nombre Completo</label>
        <InputText id="nombre_completo_empleado" class="form-control" @bind-Value="empleado.nombre_completo_empleado" />
    </div>

    <!--Campo salario Diario-->
    <div class="form-group">
        <label for="salario_diario">Salario Diario</label>
        <InputNumber id="salario_diario" class="form-control" @bind-Value="empleado.salario_diario" />
    </div>

    <!--Campo tipo de empleado-->
    <div class="form-group">
        <label for="tipo_empleado">Tipo de Empleado</label>
        <InputSelect id="tipo_empleado" class="form-control" @bind-Value="empleado.tipo_empleado_id">
            @foreach (var tipo in tiposDeEmpleado)
            {
                <option value="@tipo.identificador_categoria">@tipo.nombre_categoria</option>
            }
        </InputSelect>
    </div>
    <br />
   <button class="btn btn-primary" type="submit">Guardar</button>

</EditForm>



@code {
    [Inject] protected PreloadService PreloadService { get; set; }
    [Inject] protected ToastService ToastService { get; set; }
    [Parameter] public int id { get; set; }
    private Empleado empleado = new Empleado();
    private List<TipoDeEmpleado> tiposDeEmpleado = new List<TipoDeEmpleado?>();

    protected override async Task OnInitializedAsync()
    {
        PreloadService.Show(SpinnerColor.Primary);
        try
        {
            
            empleado = await Contexto.Empleados.FindAsync(id);
            //Trae los tipos de empleado cuyo estado sea activo organizados por el ID
tiposDeEmpleado = await Contexto.TiposDeEmpleado.Where(c => c.estado == EstadoRegistro.Activo).OrderBy(c => c.identificador_categoria).ToListAsync();
        }
        catch (Exception ex)
        {
            await Application.Current.MainPage.DisplayAlert("Error", "Fallo al conectarse a base de datos" + ex, "Ok");
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private async void GuardarCambios()
    {
        PreloadService.Show(SpinnerColor.Primary);
        try
        {
            Contexto.Empleados.Update(empleado);
            await Contexto.SaveChangesAsync();
            NavigationManager.NavigateTo("/Empleados");
        }
        catch (Exception ex)
        {
            await Application.Current.MainPage.DisplayAlert("Error", "Fallo al conectarse a base de datos" + ex, "Ok");
        }
        finally
        {
            PreloadService.Hide();
        }
    }

}
