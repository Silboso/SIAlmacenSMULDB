@page "/Productos/Editar/{ProductoID:int}"
@inject AlmacenSQLContext Contexto
@inject NavigationManager NavigationManager

<TituloSolito Nombre="Editar Producto"></TituloSolito>

<!--Formulario de edicion del producto-->
<div class="container">
    <div class="row">
        <div class="col-sm-2"></div>
        <div class="col-sm-8">
            <EditForm Model="@producto" OnValidSubmit="EditarProducto">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="Nombre">Nombre del Producto:</label>
                    <InputText id="Nombre" class="form-control" @bind-Value="producto.Nombre" />
                    <ValidationMessage For="@(() => producto.Nombre)" />
                </div>

                <div class="form-group">
                    <label for="Descripcion">Descripción:</label>
                    <InputText id="Descripcion" class="form-control" @bind-Value="producto.Descripcion" />
                </div>

                <div class="form-group">
                    <label for="Precio">Precio:</label>
                    <InputNumber id="Precio" class="form-control" @bind-Value="producto.Precio" />
                    <ValidationMessage For="@(() => producto.Precio)" />
                </div>

                <div class="form-group">
                    <label for="Stock">Stock:</label>
                    <InputNumber id="Stock" class="form-control" @bind-Value="producto.Stock" />
                    <ValidationMessage For="@(() => producto.Stock)" />
                </div>

                <!--Aquí va el select de categorías, solo se puede elegir una por producto-->
                <div class="form-group">
                    <label for="CategoriaID">Categoría:</label>
                    <InputSelect id="CategoriaID" class="form-control" @bind-Value="producto.CategoriaID">
                        @foreach (var categoria in categorias)
                        {
                            <option value="@categoria.CategoriaID">@categoria.Nombre</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => producto.CategoriaID)" />
                </div>

                <div class="form-group">
                    <label for="CodigoBarra">Código de Barras:</label>
                    <InputText id="CodigoBarra" class="form-control" @bind-Value="producto.CodigoBarra" />
                    <ValidationMessage For="@(() => producto.CodigoBarra)" />
                </div>

                <!--Añadir URL de la imagen-->
                <div class="form-group">
                    <label for="Imagen">URL Imagen:</label>
                    <InputText id="Imagen" class="form-control" @bind-Value="producto.URLImagen" />
                    <ValidationMessage For="@(() => producto.URLImagen)" />
                </div>
                <!--Espacio en blanco-->
                <br />
                <div class="d-flex justify-content-center text-center">
                    <button type="submit" class="btn btn-primary mx-2">Guardar</button>
                    <!--Recargar la interfaz-->
                    <button type="button" class="btn btn-secondary mx-2" @onclick="Recargar">Cancelar</button>
                    <!--Boton que redirige a editar los proveedores del producto-->
                    <button type="button" class="btn btn-secondary mx-2" @onclick="EditarProveedores">Editar Proveedores</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code {
    [Inject] protected PreloadService PreloadService { get; set; }
    [Inject] protected ToastService ToastService { get; set; }
    [Parameter] public int ProductoID { get; set; }
    private Producto producto = new Producto();
    private List<ProductoProveedor> productosProveedores = new List<ProductoProveedor>();
    private List<Proveedor> proveedores = new List<Proveedor>();
    private CategoriaProducto categoria = new CategoriaProducto();
    private List<CategoriaProducto> categorias = new List<CategoriaProducto>();

    protected override async Task OnInitializedAsync()
    {
        PreloadService.Show(SpinnerColor.Primary);
        try
        {
            producto = await Contexto.Productos.FindAsync(ProductoID);
            //Trae los proveedores del producto cuyo estado sea activo
            productosProveedores = await Contexto.ProductosProveedores.Where(pp => pp.ProductoID == ProductoID && pp.Estado == EstadoRegistro.Activo).ToListAsync();
            proveedores = await Contexto.Proveedores.ToListAsync();
            //Trae la categoria del producto
            categoria = await Contexto.CategoriasProductos.FindAsync(producto.CategoriaID);
            //Trae las categorias de productos cuyo estado sea activo
            categorias = await Contexto.CategoriasProductos.Where(c => c.Estado == EstadoRegistro.Activo).ToListAsync();
        }
        catch (Exception ex)
        {
            await Application.Current.MainPage.DisplayAlert("Error", "Fallo al conectarse a base de datos" + ex, "Ok");
        }
        finally
        {
            //Retraso de medio segundo para que se muestre el spinner
            await Task.Delay(500);
            PreloadService.Hide();
        }
    }

    private async Task EditarProducto()
    {
        PreloadService.Show(SpinnerColor.Primary);
        try
        {
            //Actualiza el producto
            Contexto.Productos.Update(producto);
            await Contexto.SaveChangesAsync();
            //Actualiza la lista de productos
            productosProveedores = await Contexto.ProductosProveedores.Where(pp => pp.ProductoID == ProductoID && pp.Estado == EstadoRegistro.Activo).ToListAsync();
            proveedores = await Contexto.Proveedores.ToListAsync();
            //Actualiza la categoria del producto
            categoria = await Contexto.CategoriasProductos.FindAsync(producto.CategoriaID);
            //Refresca la interfaz
            StateHasChanged();
            //Espera 1 segundo
            await Task.Delay(500);
            PreloadService.Hide();
            //Tostada "El registro se actualizo con exito"
            ToastService.Notify(new(ToastType.Success, $"Actualizado con exito"));
        }
        catch (Exception e)
        {
            PreloadService.Hide();
            await Application.Current.MainPage.DisplayAlert("Error", "Fallo al conectarse a base de datos" + e, "Ok");
        }
    }

    private void Recargar()
    {
        NavigationManager.NavigateTo("/Productos/Editar/" + ProductoID, true);
    }

    private void EditarProveedores()
    {
        NavigationManager.NavigateTo("/Productos/EditarProductoProveedores/" + ProductoID, true);
    }
}
