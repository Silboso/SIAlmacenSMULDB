@page "/Proveedores/Editar/{id:int}"
@inject AlmacenSQLContext Contexto
@inject NavigationManager NavigationManager

<TituloSolito Nombre="Editar Proveedor"></TituloSolito>
<EditForm Model="proveedor" OnValidSubmit="EditarProveedor">

    <DataAnnotationsValidator />

    <ValidationSummary />

    <div class="form-group">

        <label for="Nombre">Nombre:</label>

        <InputText id="Nombre" class="form-control" @bind-Value="proveedor.Nombre" />

        <ValidationMessage For="@(() => proveedor.Nombre)" />

        <label for="Descripcion">Direccion:</label>

        <InputText id="Descripcion" class="form-control" @bind-Value="proveedor.Direccion" />

        <ValidationMessage For="@(() => proveedor.Direccion)" />

        <label for="Direccion">Telefono:</label>

        <InputText id="Direccion" class="form-control" @bind-Value="proveedor.Telefono" />

        <ValidationMessage For="@(() => proveedor.Telefono)" />

        <label for="Telefono">Email:</label>

        <InputText id="Telefono" class="form-control" @bind-Value="proveedor.Email" />

        <ValidationMessage For="@(() => proveedor.Email)" />

        <label for="Contacto">Contacto:</label>

        <InputText id="Contacto" class="form-control" @bind-Value="proveedor.Contacto" />

        <ValidationMessage For="@(() => proveedor.Contacto)" />

    </div>

    <br />

    <button type="submit" class="btn btn-primary">Editar</button>

</EditForm>

@code {
    [Inject] protected PreloadService PreloadService { get; set; }
    [Inject] protected ToastService ToastService { get; set; }
    [Parameter] public int id { get; set; }
    private Proveedor proveedor = new Proveedor();

    protected override async Task OnInitializedAsync()
    {
        PreloadService.Show(SpinnerColor.Primary);
        try
        {
            proveedor = await Contexto.Proveedores.FindAsync(id);
            //Espera medio segundo
            Thread.Sleep(500);
        }
        catch (Exception ex)
        {
            await Application.Current.MainPage.DisplayAlert("Error", "Fallo al conectarse a base de datos" + ex, "Ok");
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private async Task EditarProveedor()
    {
        PreloadService.Show(SpinnerColor.Primary);
        try
        {
            Contexto.Proveedores.Update(proveedor);
            await Contexto.SaveChangesAsync();
            //Tostada de confirmación
            ToastService.Notify(new ToastMessage(ToastType.Warning, $"Editado con exito"));
            NavigationManager.NavigateTo("/Proveedores");
        }
        catch (Exception ex)
        {
            await Application.Current.MainPage.DisplayAlert("Error", "Fallo al conectarse a base de datos" + ex, "Ok");
        }
        finally
        {
            PreloadService.Hide();
        }
    }

}
