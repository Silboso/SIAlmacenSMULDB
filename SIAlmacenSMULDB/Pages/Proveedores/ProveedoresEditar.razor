@page "/Proveedores/Editar/{id:int}"
@inject AlmacenSQLContext Contexto
@inject NavigationManager NavigationManager

<TituloSolito Nombre="Editar Proveedor"></TituloSolito>

<div class="container">
    <div class="row">
        <div class="col-sm-2"></div>
        <div class="col-sm-8">
            <EditForm Model="proveedor" OnValidSubmit="EditarProveedor">

                <DataAnnotationsValidator />

                <ValidationSummary />

                <div class="form-group">

                    <label for="Nombre">Nombre:</label>

                    <InputText id="Nombre" class="form-control" @bind-Value="proveedor.Nombre" />

                    <ValidationMessage For="@(() => proveedor.Nombre)" />
                    <br />

                    <label for="Descripcion">Direccion:</label>

                    <InputText id="Descripcion" class="form-control" @bind-Value="proveedor.Direccion" />

                    <ValidationMessage For="@(() => proveedor.Direccion)" />
                    <br />

                    <label for="Direccion">Telefono:</label>

                    <InputText id="Direccion" class="form-control" @bind-Value="proveedor.Telefono" />

                    <ValidationMessage For="@(() => proveedor.Telefono)" />
                    <br />

                    <label for="Telefono">Email:</label>

                    <InputText id="Telefono" class="form-control" @bind-Value="proveedor.Email" />

                    <ValidationMessage For="@(() => proveedor.Email)" />
                    <br />

                    <label for="Contacto">Contacto:</label>

                    <InputText id="Contacto" class="form-control" @bind-Value="proveedor.Contacto" />

                    <ValidationMessage For="@(() => proveedor.Contacto)" />
                    <br />

                </div>

                <br />
                <div class="d-flex justify-content-center text-center">
                    <button type="submit" class="btn btn-primary">Editar</button>
                </div>

            </EditForm>
        </div>
    </div>
</div>

@code {
    [Inject] protected PreloadService PreloadService { get; set; }
    [Inject] protected ToastService ToastService { get; set; }
    [Parameter] public int id { get; set; }
    private Proveedor proveedor = new Proveedor();

    protected override async Task OnInitializedAsync()
    {
        PreloadService.Show(SpinnerColor.Primary);
        try
        {
            proveedor = await Contexto.Proveedores.FindAsync(id);
            //Espera medio segundo
            Thread.Sleep(500);
        }
        catch (Exception ex)
        {
            await Application.Current.MainPage.DisplayAlert("Error", "Fallo al conectarse a base de datos" + ex, "Ok");
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private async Task EditarProveedor()
    {
        PreloadService.Show(SpinnerColor.Primary);
        //Confirmar cambios
        var confirmado = await Application.Current.MainPage.DisplayAlert("Confirmar", "¿Desea editar el proveedor?", "Si", "No");
        if (!confirmado)
        {
            PreloadService.Hide();
            return;
        }
        else
        {
            try
            {
                Contexto.Proveedores.Update(proveedor);
                await Contexto.SaveChangesAsync();
                //Tostada de confirmación
                ToastService.Notify(new ToastMessage(ToastType.Warning, $"Editado con exito"));
                NavigationManager.NavigateTo("/Proveedores");
            }
            catch (Exception ex)
            {
                await Application.Current.MainPage.DisplayAlert("Error", "Fallo al conectarse a base de datos" + ex, "Ok");
            }
            finally
            {
                PreloadService.Hide();
            }
        }
    }

}
