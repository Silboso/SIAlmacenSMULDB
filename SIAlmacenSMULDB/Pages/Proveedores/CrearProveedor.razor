@page "/Proveedores/Crear"
@inject AlmacenSQLContext Contexto
@inject NavigationManager NavigationManager

<TituloSolito Nombre="Crear Proveedor"></TituloSolito>
<!--Edit form respecto al modelo de proveedor-->

<div class="container">
    <div class="col-sm-2"></div>
    <div class="col-sm-8">
        <EditForm Model="nuevoProveedor" OnValidSubmit="RegistrarProveedor">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="Nombre">Nombre:</label>
                <InputText id="Nombre" class="form-control" @bind-Value="nuevoProveedor.Nombre" />
                <label for="Descripcion">Direccion:</label>
                <InputText id="Descripcion" class="form-control" @bind-Value="nuevoProveedor.Direccion" />
                <label for="Direccion">Telefono:</label>
                <InputText id="Direccion" class="form-control" @bind-Value="nuevoProveedor.Telefono" />
                <label for="Telefono">Email:</label>
                <InputText id="Telefono" class="form-control" @bind-Value="nuevoProveedor.Email" />
                <ValidationMessage For="@(() => nuevoProveedor.Nombre)" />
                <label for="Contacto">Contacto:</label>
                <InputText id="Contacto" class="form-control" @bind-Value="nuevoProveedor.Contacto" />
            </div>

            <br />

            <button type="submit" class="btn btn-primary">Registrar</button>

        </EditForm>
    </div>
</div>



@code {
    [Inject] protected PreloadService PreloadService { get; set; }
    [Inject] protected ToastService ToastService { get; set; }
    private Proveedor nuevoProveedor = new Proveedor();

    //Spinner de carga al iniciar la pagina
    protected override void OnInitialized()
    {
        //Muestra el spinner
        PreloadService.Show(SpinnerColor.Primary);
        //Espera medio segundo
        Thread.Sleep(500);
        //Esconde el spinner
        PreloadService.Hide();
    }

    private async Task RegistrarProveedor()
    {
        PreloadService.Show(SpinnerColor.Primary);
        try
        {
            nuevoProveedor.Estado = EstadoRegistro.Activo;
            await Contexto.Proveedores.AddAsync(nuevoProveedor);
            await Contexto.SaveChangesAsync();
            //Tostada de confirmación
            ToastService.Notify(new(ToastType.Warning, $"Registrado con exito"));
            NavigationManager.NavigateTo("/Proveedores");
        }
        catch (Exception ex)
        {
            await Application.Current.MainPage.DisplayAlert("Error", "Fallo al conectarse a base de datos" + ex, "Ok");
        }
        finally
        {
            PreloadService.Hide();
        }
    }

}
