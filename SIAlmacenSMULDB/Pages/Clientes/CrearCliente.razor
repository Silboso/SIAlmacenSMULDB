@page "/Clientes/Crear"
@inject EmpleadosPGSQLContext Contexto
@inject NavigationManager NavigationManager

<TituloSolito Nombre="Crear Cliente" />

<!--Formulario para crear un cliente-->

<EditForm Model="@nuevoCliente" OnValidSubmit="RegistrarCliente">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="nombre_completo_cliente">Nombre Completo</label>
        <InputText id="nombre_completo_cliente" class="form-control" @bind-Value="nuevoCliente.nombre_completo_cliente" />
    </div>
    <br />

    <div class="form-group">
        <label for="direccion">Direccion</label>
        <InputText id="direccion" class="form-control" @bind-Value="nuevoCliente.direccion" />
    </div>
    <br />

    <div class="form-group">
        <label for="telefono_contacto">Telefono</label>
        <InputText id="telefono_contacto" class="form-control" @bind-Value="nuevoCliente.telefono_contacto" />
    </div>
    <br />

    <div class="d-flex justify-content-center text-center">
        <button type="submit" class="btn btn-primary">Crear</button>
    </div>
</EditForm>




@code {
    //Esta pagina maneja una base de datos PostgreSQL
    [Inject] protected PreloadService PreloadService { get; set; }
    [Inject] protected ToastService ToastService { get; set; }
    private Cliente nuevoCliente = new Cliente();

    protected override async Task OnInitializedAsync()
    {
        PreloadService.Show(SpinnerColor.Primary);
        try
        {
            //Espera 1 segundo
            await Task.Delay(500);
        }
        catch (Exception ex)
        {
            //Alerta app
            await Application.Current.MainPage.DisplayAlert("Error", "No se pudo cargar el cliente", "Ok");
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private async void RegistrarCliente()
    {
        PreloadService.Show(SpinnerColor.Primary);
        try
        {
            //Asigna el estado activo
            nuevoCliente.estado = EstadoRegistro.Activo;
            //Crea el cliente
            await Contexto.Clientes.AddAsync(nuevoCliente);
            //Guarda los cambios
            await Contexto.SaveChangesAsync();
            //Espera 1 segundo
            await Task.Delay(500);
            //Muestra el toast de exito
            ToastService.Notify(new(ToastType.Success, $"El cliente se ha creado correctamente"));
            //Redirecciona a la pagina de clientes
            NavigationManager.NavigateTo("/Clientes");

        }
        catch (Exception ex)
        {
            //Toast de error
            ToastService.Notify(new(ToastType.Warning, $"No se pudo crear el cliente"));
        }
        finally
        {
            PreloadService.Hide();
        }
    }

}
