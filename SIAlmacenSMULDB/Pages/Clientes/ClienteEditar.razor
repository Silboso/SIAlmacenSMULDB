@page "/Clientes/Editar/{id:int}"
@inject EmpleadosPGSQLContext Contexto
@inject NavigationManager NavigationManager

<TituloSolito Nombre="Editar Cliente" />

<!--Formulario para editar un cliente-->

<div class="container">
    <div class="row">
        <div class="col-sm-2"></div>
        <div class="col-sm-8">
            <EditForm Model="@cliente" OnValidSubmit="EditarCliente">

                <DataAnnotationsValidator />

                <ValidationSummary />

                <div class="form-group">

                    <label for="nombre_completo_cliente">Nombre Completo</label>

                    <InputText id="nombre_completo_cliente" class="form-control" @bind-Value="cliente.nombre_completo_cliente" />

                </div>
                <br />
                <div class="form-group">

                    <label for="direccion">Direccion</label>

                    <InputText id="direccion" class="form-control" @bind-Value="cliente.direccion" />

                </div>
                <br />
                <div class="form-group">

                    <label for="telefono_contacto">Telefono</label>

                    <InputText id="telefono_contacto" class="form-control" @bind-Value="cliente.telefono_contacto" />

                </div>

                <br />
                <div class="d-flex justify-content-center text-center">
                    <button type="submit" class="btn btn-primary">Editar</button>
                </div>
            </EditForm>

        </div>
    </div>
</div>


@code {
    [Inject] protected PreloadService PreloadService { get; set; }
    [Inject] protected ToastService ToastService { get; set; }
    [Parameter] public int id { get; set; }
    private Cliente cliente = new Cliente();

    protected override async Task OnInitializedAsync()
    {
        PreloadService.Show(SpinnerColor.Primary);
        try
        {
            cliente = await Contexto.Clientes.FindAsync(id);
        }
        catch (Exception ex)
        {
            await Application.Current.MainPage.DisplayAlert("Error", "Fallo al conectarse a base de datos" + ex, "Ok");
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private async Task EditarCliente()
    {
        PreloadService.Show(SpinnerColor.Primary);
        //Confirmar cambios
        var confirm = await Application.Current.MainPage.DisplayAlert("Confirmar", "¿Desea guardar los cambios?", "Si", "No");
        if (!confirm)
        {
            PreloadService.Hide();
            return;
        }
        else
        {
            try
            {
                Contexto.Clientes.Update(cliente);
                await Contexto.SaveChangesAsync();
                //Tostada de exito
                ToastService.Notify(new(ToastType.Success, $"Editado con exito"));
                NavigationManager.NavigateTo("/Clientes");
            }
            catch (Exception ex)
            {
                await Application.Current.MainPage.DisplayAlert("Error", "Fallo al conectarse a base de datos" + ex, "Ok");
            }
            finally
            {
                PreloadService.Hide();
            }
        }
    }



}
