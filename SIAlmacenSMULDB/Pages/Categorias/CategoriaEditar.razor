@page "/Categorias/Editar/{CategoriaID:int}"
@inject AlmacenSQLContext Contexto
@inject NavigationManager NavigationManager

<TituloSolito Nombre="Editar Categoria"></TituloSolito>
<EditForm Model="categoria" OnValidSubmit="EditarCategoria">

    <DataAnnotationsValidator />

    <ValidationSummary />
    <div class="container">
        <div class="row">
            <div class="col-sm-2"></div>
            <div class="col-sm-8">
                <div class="form-group">

                    <label for="Nombre">Nombre:</label>

                    <InputText id="Nombre" class="form-control" @bind-Value="categoria.Nombre" />

                    <ValidationMessage For="@(() => categoria.Nombre)" />
                    <br />
                    <label for="Descripcion">Descripcion:</label>

                    <InputText id="Descripcion" class="form-control" @bind-Value="categoria.Descripcion" />

                    <ValidationMessage For="@(() => categoria.Descripcion)" />


                </div>

                <br />

                <div class="d-flex justify-content-center text-center">
                    <button type="submit" class="btn btn-primary">Editar</button>
                </div>

            </div>
        </div>
    </div>

</EditForm>

@code {
    [Inject] protected PreloadService PreloadService { get; set; }

    [Inject] protected ToastService ToastService { get; set; }

    [Parameter] public int CategoriaID { get; set; }

    private CategoriaProducto categoria = new CategoriaProducto();

    protected override async Task OnInitializedAsync()
    {
        PreloadService.Show(SpinnerColor.Primary);
        try
        {
            categoria = await Contexto.CategoriasProductos.FindAsync(CategoriaID);
        }
        catch (Exception ex)
        {
            await Application.Current.MainPage.DisplayAlert("Error", "Fallo al conectarse a base de datos" + ex, "Ok");
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private async Task EditarCategoria()
    {
        PreloadService.Show(SpinnerColor.Primary);
        //Confirmacion de los cambios
        var confirm = await Application.Current.MainPage.DisplayAlert("Confirmar", "¿Esta seguro que desea guardar los cambios hechos en esta categoria?", "Si", "No");
        if (!confirm)
        {
            PreloadService.Hide();
            return;
        }
        else
        {
            try
            {
                Contexto.CategoriasProductos.Update(categoria);
                await Contexto.SaveChangesAsync();
                //Tostada de confirmación
                ToastService.Notify(new(ToastType.Warning, $"Editado con exito"));
                NavigationManager.NavigateTo("/Categorias");
            }
            catch (Exception ex)
            {
                await Application.Current.MainPage.DisplayAlert("Error", "Fallo al conectarse a base de datos" + ex, "Ok");
            }
            finally
            {
                PreloadService.Hide();
            }
        }
    }

}
